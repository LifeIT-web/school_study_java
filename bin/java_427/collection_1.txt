****
Collection(컬렉션)

: 자바에서는 많은 수의 다양한 패키지(Java API)를 제공하여 개발자들이
	자바 어플리케이션을 쉽게 개발할수 있도록 도와줌
	
	.Collection FrameWork(컬렉션 프레임 워크)
	
	: 다수의 데이터를 쉽게 처리할 수 있는 표준화된 방법을 제공하는 클래스
	
	.형식화 클래스  : 데이터를 표준화된 형식으로 출력하는데
				도움을 주는 클래스
				
	: 컬렉션 프레임 워크란  데이터군을 저장하는 (vector 와 같은)
	클래스들을 표준화한 설계를 뜻함
	
	Collection 은 다수의 데이터 즉 데이터 그룹을,
	Framework 은 표준화된 프로그래밍 방식을 의미
	
	Java API 문서에서는 컬렉션 프레임 워크를 데이터 군을 다루고
	표현하기 위한 단일화된 구조
	
	
	컬렉션 프레임 워크의 핵심 인터페이스
	
	Collection - List , Set 
	
	// Map
	
	: List 와 set을 구현한 컬렉션 클래스들은 서로 공통점이 많아
	공통된 부분을 다시 뽑아 컬렉션 인터페이스를 정의 할수 있엇지만
	 map 인터페이스들을 과는 전혀 다른 형태로 컬렉션을 다루기 때문에 같은 상속 계층도에 포함되지 못함
	 
	 인터페이스 						특장
	 
	 List 		순서가 있는 데이터의 집합, 데이터 중복을 허용함
	 					
	 				예) 대기자 명단
	 				클래스 -> ArrayList, LinkedList, Stack, Vector ...
	 			
	 Set		 순서가 없는 데이터의 집합 데이터의 중복을 허용하지 않음
	 			
	 				예) 양의 정수 집합, 소수의 집합
	 				클래스 - > HashSet, TreeSet
	 			
	 Map		 Key와 Value의 쌍으로 이루어진 데이터의 집합 순서는 유지되지 않으며,
	 				키는 중복을 허용하진 않고 값은 중복을 허용
	 				
	 	 			예) 우편번호, 지역번호(전화번호) 
	 	 			클래스 => HashMap, TreeMap, HashTable, Properties
	 	 			
	 	 
	 	 
	 	 Vector와 ArrayList
	 	 
	 	 : Vector와 ArrayList는 컬렉션 프레임워크에서 가장 많이 사용되는
	 	 	컬렉션 클래스 임
	 	 	
	 	 	이둘은 List 인터페이스를 구현하기 때문에 데이터의
	 	 	저장순서가 유지되고 중복을 허용한다는 공통적인 특징을 갖음
	 	 	
	 	 	ArrayList는 기존의 Vector를 개선한 것으로 Vector 와 구현원리와 기능적인
	 	 	측면에서 동일하다 할수 있음
	 	 	
	 	 	공통점						차이점
	 	List 인터페이스를 구현함			Vector는 멀티스레드에 대한 동기화가 되어있으나 
	 	저장순서가 유지되고 중복 허용			ArrayList는 안되어 있다.
	 	데이터의 저장공간으로 배열사용
	 			
	 			
	 			
	 			
	 Vector()
	 
	 : 10개의 데이터를 저장할수 있는 길이의 객체를 생성함
	 	저장공간이 부족한 경우 10개씩 증가함
	 	
	 	capacity() => Vector 의 용량 반환
	 	
	 	Vector(int size)
	 	
	 	: size 개의 데이터를 저장할 수 있는 길이의 객체를 생성함
	 	저장공간이 부족할 경우 size 개씩 증가함
	 	
	 	Vector(int size, int incr)
	 	
	 	: size 개의 데이터를 저장할 수 있는 길이의 객체를 생성함
	 	저장공간이  부족한 경우 incr 개씩 증가함
	 	
	 	
	 	