Thread(스레드)

: 컴퓨터는 실행할 프로그램을 메모리에 load 시켜놓고 CPU 가 명령어를
  하나씩 해석하면서 처리함. 이때 하드 디스크와 같은 보조기억장치에
  저장되어 있는 프로그램을 메모리에 저장하게 됨
  하드 디스크에 들어있는 프로그램을 파일이라고 부르는 반면에
  메모리에 적재된 프로그램을 Process(프로세스) 라고 부름
  
  Thread는 프로세스 안에서 순차적으로 작동하는 명령어의 집합임
  순차적으로 실행되는 명령어들은 하나의 실로 꿸수 있기 때문에
  Thread(실)이라고 부름
  
  어떤 프로그램(프로세스)에서는 여러개의 명령어가 독립적으로 실행되는
  경우가 있는데 이런 경우를 다중 스레드라고 함
  즉 Multi-Thread(다중 스레드)는 한개의 프로세스에서 독립적으로
  처리되는 작업이 여러개 있는 경우임.
  
  
  
  자바에서 스레드는 java.lang.Thread 클래스에서 상속받아 사용함
  스레드를 사용하는 경우의 대부분은 동시에 두가지 이상의 작업을 처리할때 임
  
  . 프로세스는 특정한 작업을 처리하기 위해 메모리에 적재되어 있는 프로그램이고
  	스레드는 명령의 제어 흐름임. 즉 명령어가 실행되는 순서의 흐름임
  	스레드는 프로세스 내부에서 독립적인 작업을 처리하는 명령어의 집합임.
  	
  . 스레드의 사용방법
  
  	: 자바는 스레드를 사용하기 위해 두가지 방법을 제공함
  	
  		첫번째는 java.lang.Thread 클래스를 상속받아 스레드를 생성하여 사용하는 방법
  		
  			. class 클래스 이름 extends Thread{
  					...;
  			}
  			
  		두번째는 java.lang.Runnable 인터페이스를 implements 해서 스레드를 생성하는 방법
  		<자바는 단일 상속만 허용하기 때문에 인터페이스를 구현해서 쓴다.>
  		
  			. class 클래스이름 extends 슈퍼클래스 implements Runnable{
  						...;
  			}
  			
  			
  			  			
  			
  			
  			. Thread class 사용
  			
  		1. Thread 클래스를 상속 받은 클래스를 선언한다.
  		
  		2. Thread 클래스의 추상메소드인 run() 메소드를 재정의한다.
  		
  			class ThreadTest extends Thread
  			{
  				public void run(){  => run() 메소드 재정의
  					...;
  					}
  			}
  			(상속받은 건 run()을 정의하지 않아도 문제되지 않지만 Runnable은 필수)
  			
  		3. main() 메소드에서 Thread 클래스를 상속받은 클래스 객체를 생성한다.
  		
  		4. 생성된 객체를 사용해 start() 메소드를 호출한다.
  		
  				public static void main(String[] args)
  				{
  					
  					ThreadTest obj = new ThreadTest(); => 객체 생성
  					
  					obj.start(); -> 메소드 호출은 run()이 아니라 start() 이니 주의!
  						
  				}
		 						
  						
  						
  		Thread 에서
  		run() 대신 start() 를 호출하는 이유
  		
  		. 스레드를 실행할 때 직접 run() 메소드를 호출하지 않고 start() 호출하는 이유가 있음.
  		    프로세스나 스레드가 실행된다는 의미는 CPU를 사용해 작업을 수행하는 것을 뜻함
  		    그런데 한번에 한가지 작업만 처리하는 것이 아니고 동시에 2가지 이상의 작업을 처리하는 
  		    멀티 프로세싱을 위해서는 CPU 스케줄링이 필요함. 운영체제는 보다 효율적으로 사용하기 위해
  		    작업의 우선순위를 정해 처리함
  		    결국 CPU의 사용권한을 정하는 것은 프로그램이 아니라 운영체제의 몫임.
  		  start() 메소드는 스레드를 실행 가능한 상태 즉
  		    스레드가 CPU를 사용할 수 있도록 준비 상태를 만드는 역할을 함
  		    그리고 CPU 스케쥴러에 의해 run() 메소드를 호출해 실제 CPU를 사용하는 상태로 바뀜
  		  
		. 스레드 우선순위 지정
		
		: 멀티 스레드는 여러개의 스레드가 동시에 실행된다고 하였지만
		  이것은 일반적인 설명이고 실제로는 그렇지 않음.
		  대부분의 컴퓨터는 한개의 CPU 만 가지고 있음
		  그렇기 때문에 실제로 여러스레드 중에서 하나의 스레드만
		  수행함.(시분할 시스템) 스레드가 작동하는 방식은 하나의 스레드가
		  종료할때 까지 CPU 를 독점하는 것이 아니고 여러개의
		  스레드를 번갈아가며 처리함 
		  
		  이처럼 여러개의 스레드를 교차하면서 처리하는 것을
		  Scheduling(스케줄링) 이라고 함.
		  여러개의 스레드 중에서 어떤 스레드가 CPU를 사용할지는
		  스레드 스케쥴러가 결정해 처리함. 따라서 자바스레드의
		  정확한 작동을 예측하기는 힘듦
		  하지만 setPriority()메소드를 이용해 우선순우를 부여 가능
		  
		  자바는 총 10단계 우선순위를 갖음. 그중에서 3가지 우선순위는
		  Thread 클래스의 맴버 상수로 정의 되어 있음
		  
		  static int MAX_PRIORITY : 스레드가 가지는 최고 우선순위 값
		  static int MIN_PRIORITY : 스레드가 가지는 최소 우선순위 값
		  static int NORM_PRIORITY : 스레드가 가지는 보통 우선순위 값 // 안쓰면 노멀 기본값이 5!
		  
		  
		  
		  
		  
		  
. Runnable Interface 사용

: 이미 다른 클래스를 상속받아 Thread 클래스를 상속받아 사용할수 없을때
  Runnable Interface 이용함.


	Runnable 사용방법
	
	1. Runnable 인터페이스를 implements 하는 클래스를 정의한다.
	
	2. Runnable 인터페이스의 run()메소드를 재정의한다.
	
		class RunnableTest implements Runnable // Runnable 인터페이스 구현
			{
				public void run() // run() 메소드 재정의
				{
					...;
				}
			}		    		  
	3. main()메소드에서 Runnable 인터페이스를 구현한 클래스 객체를 생성.
	
	4. Thread 클래스 객체를 생성하면서 생성자에 3. 에서 생성한 객체를 매개변수로 전달
	
	5. 4. 에서 생성한 객체를 사용해 start() 메소드 호출
	
		public static void main(String[] args)
		{
			RunnableTest obj = new RunnableTest(); // 객체 생성
			
			Thread thread = new Thread(obj);	// Thread 클래스 객체 생성
				
				thread.start(); 				// start 메소드 호출
		}
  		  
  		 
 